import type { GetStaticProps } from "next";
import Head from "next/head";
import axios from "axios";
import type { AxiosResponse } from "axios";
import Image from "next/image";
import { useEffect } from "react";
// import styles from '../styles/Home.module.css'
import { GetProductsArray, MinifyProduct } from "../src/types/types";
import imageLoader from "../src/imageLoader";
import Link from "next/link";
import Layout from "../components/Layout";
import useSWR from "swr";
import type { SWRConfiguration } from "swr";
import ProductCardOne from "../components/product/ProductCardOne";
// import { use } from 'react';

// async function getData() {
//   // const res = await fetch('...');
//   // const name: string = await res.json();
//   // return name;

//   const getBody: Search = {
//     perPage: "20",
//     page: "1",
//     category: { "category.L1": "laptop", "category.L2": "Gaming" },
//     sort: "price",
//   };

//   try {
//     const response: AxiosResponse = await axios.post(
//       `${process.env.BASE_API_URL}/pro/psearch`,
//       getBody
//     );

//     const dataProduct: GetProductsArray = {
//       info: null,
//       results: response.data,
//     };

//     type MinifyProducts = MinifyProduct[];

//     const minifyProducts: MinifyProducts = [];

//     dataProduct.results?.map((product) => {
//       const minifyProduct: MinifyProduct = {
//         Price: product.variants[product.primary_variant].price,
//         _id: product._id,
//         image: product.main.images[0],
//         imid: product.imid,
//         title_en: product.main.title_en,
//         title_fa: product.main.title_fa,
//         sku: product.main.sku,
//       };
//       minifyProducts.push(minifyProduct);
//     });
//     //  console.log(minifyProducts)
//     return {
//        minifyProducts,
//     };
//   } catch (err) {
//     return {
//         minifyProducts: undefined,
//     };
//   }

// }

const config: SWRConfiguration = {
  fallbackData: "fallback",
  revalidateOnMount: false,
  // ...
};
export function imageAddress(
  src: string | undefined | null,
  w: number,
  h: number,
  quality: 50 | 80 | 90 | 100,
  format: "webp" | "jpeg" | "jpg" | "png" | "svg"
): string {
  if (src)
    return `${process.env.NEXT_PUBLIC_IMAGE_BASE}?x=${w}&y=${h}&q=${quality}&t=${format}&path=${src}`;
  else return `/Asset12.png`;
}

const fetcher = (URL: string) => axios.get(URL).then((res) => res.data);

function Home({
  minifyProducts,
}: {
  minifyProducts: MinifyProduct[] | undefined;
}) {
  // const name = use(getData());
  // const { data, err } = useSWR<string[]>("/api/hello", fetcher, config);

  useEffect(() => {
    // console.log(data);
  }, []);

  return (
    <>
      <div className="flex flex-wrap w-full bg-white">
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Link href={"/other"}>
          <div>other page</div>
        </Link>
        {/* <Slider></Slider> */}

        {minifyProducts?.map((minifyProduct: MinifyProduct) => (
          <>
            <ProductCardOne minifyProduct={minifyProduct} />
          </>
        ))}
        <hr />
      </div>
    </>
  );
}

type Search = {
  perPage: string;
  page: string;
  category: object;
  sort: string;
};

export const getStaticProps: GetStaticProps = async () => {
  const getBody: Search = {
    perPage: "25",
    page: "1",
    category: { "category.L1": "laptop" },
    sort: "price",
  };

  try {
    const response: AxiosResponse = await axios.post(
      `${process.env.BASE_API_URL}/pro/psearch`,
      getBody
    );

    const dataProduct: GetProductsArray = {
      info: null,
      results: response.data,
    };

    type MinifyProducts = MinifyProduct[];

    const minifyProducts: MinifyProducts = [];

    dataProduct.results?.map((product) => {
      // console.log(product.attributes[3]);
      const minifyProduct: MinifyProduct = {
        primaryAttribute: product.attributes[3],
        Price: product.variants[product.primary_variant].price,
        _id: product._id,
        image: product.main.images[0],
        imid: product.imid,
        title_en: product.main.title_en,
        title_fa: product.main.title_fa,
        sku: product.main.sku,
      };
      minifyProduct["color"] = [];
      product.variants.map((item) => {
        if (minifyProduct.color) minifyProduct.color.push(item.color);
      });
      minifyProducts.push(minifyProduct);
    });
    //  console.log(minifyProducts)
    return {
      props: {
        // products: dataProduct.results,
        minifyProducts: minifyProducts,
      },
    };
  } catch (err) {
    return {
      props: {
        minifyProducts: undefined,
      },
    };
  }
};

Home.getLayout = function getLayout(page: typeof Home) {
  return <Layout>{page}</Layout>;
};

export default Home;
