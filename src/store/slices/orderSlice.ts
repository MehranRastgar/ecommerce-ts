import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Order } from "../../types/types";
import {
  getCartPrices,
  updatedPrice,
  UpdatePriceRespons,
} from "../api/orderApi";
import { AppState } from "../store";

export type variantId = {
  id: string;
};

export const updateCartPrices = createAsyncThunk(
  "order/updateCartPrices",
  async (orderReq: variantId[]) => {
    const response:
      | UpdatePriceRespons[]
      | {
          error: {
            errorCode: any;
          };
        } = await getCartPrices(
      orderReq,
      String(localStorage?.getItem("accessToken")),
      String(localStorage?.getItem("user-id"))
    );

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export interface OrderState {
  value: Order;
  updatedPrice: UpdatePriceRespons[];
  status: "success" | "loading" | "403" | "401" | "unknownError";
  token: "loading" | string;
  updateFlag:
    | "idle"
    | "request"
    | "success"
    | "pending"
    | "403"
    | "401"
    | "unknownError"
    | "faild";
}

const initialState: OrderState = {
  value: {},
  updatedPrice: [],
  updateFlag: "idle",
  status: "loading",
  token: "loading",
};

export const orderSlice = createSlice({
  name: "order",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //   refreshToken: (state) => {},
    //   setMobileNumber: (state, action: PayloadAction<number>) => {
    //     state.value.usernamebyphone = action.payload;
    //   },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder
      .addCase(updateCartPrices.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateCartPrices.rejected, (state) => {
        state.status = "unknownError";
      })
      .addCase(
        updateCartPrices.fulfilled,
        (state, action: PayloadAction<UpdatePriceRespons[] | any>) => {
          if (action?.payload?.error === undefined) {
            state.updatedPrice = action.payload;
            state.updateFlag = "success";
          } else {
            state.updateFlag = "faild";
          }
        }
      );
  },
});

export const {} = orderSlice.actions;

export const selectUserInfo = (state: AppState) => state.client.value;

export const selectUpdatedPrices = (state: AppState) =>
  state.order.updatedPrice;
export const selectUpdatedPricesFlag = (state: AppState) =>
  state.order.updateFlag;

export default orderSlice.reducer;
